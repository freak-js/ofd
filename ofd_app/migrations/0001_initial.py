# Generated by Django 2.1.5 on 2019-03-22 01:49

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone

def create_order_statuses(apps, schema_editor):
    OrderStatus = apps.get_model('ofd_app', 'OrderStatus')
    OrderStatus(code='I', name='В работе').save()
    OrderStatus(code='A', name='Выполнен').save()
    OrderStatus(code='R', name='Отклонён').save()

def create_groups(apps, schema_editor):
    Group = apps.get_model("auth","Group")
    user = Group.objects.get_or_create(name='User')
    manager = Group.objects.get_or_create(name='Manager')
    admin = Group.objects.get_or_create(name='Admin')

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0009_alter_user_last_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('city', models.CharField(blank=True, max_length=100, null=True, verbose_name='Город проживания')),
                ('inn', models.CharField(blank=True, max_length=12, null=True, verbose_name='ИНН')),
                ('org', models.CharField(max_length=100, null=True, verbose_name='Организация')),
                ('is_legal', models.BooleanField(default=False, verbose_name='Юридичиское лицо?')),
                ('phone_number', models.CharField(max_length=18, verbose_name='Номер телефона')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('parent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('adddate', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления заказа')),
                ('comment', models.TextField(null=True, verbose_name='Комментарий к заказу')),
            ],
        ),
        migrations.CreateModel(
            name='OrderProduct',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.IntegerField(verbose_name='Количество')),
                ('cost', models.IntegerField(verbose_name='Итоговая стоимость для одного продукта')),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ofd_app.Order', verbose_name='Отношение к номеру заказа')),
            ],
        ),
        migrations.CreateModel(
            name='OrderStatus',
            fields=[
                ('code', models.CharField(max_length=1, primary_key=True, serialize=False, verbose_name='Код статуса')),
                ('name', models.CharField(max_length=30, verbose_name='Название статуса')),
            ],
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('product_id', models.AutoField(primary_key=True, serialize=False)),
                ('product_name', models.CharField(max_length=100, unique=True, verbose_name='Имя продукта')),
                ('product_moddate', models.DateTimeField(auto_now=True, verbose_name='Дата модификации продукта')),
                ('product_adddate', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления продукта')),
                ('product_cost', models.IntegerField(verbose_name='Базовая стоимость продукта')),
                ('product_is_active', models.BooleanField(default=True, verbose_name='Продукт активен?')),
            ],
        ),
        migrations.CreateModel(
            name='ProductUserRel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('cost', models.IntegerField(verbose_name='Стоимость продукта')),
                ('moddate', models.DateTimeField(auto_now=True, verbose_name='Дата модификации связи')),
                ('adddate', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления связи')),
                ('user_mod', models.IntegerField(verbose_name='Пользователь, который последний раз модифицировал запись')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ofd_app.Product', verbose_name='Продукт')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='Пользователь')),
            ],
        ),
        migrations.AddField(
            model_name='orderproduct',
            name='product',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to='ofd_app.Product', verbose_name='Отношение к продукту'),
        ),
        migrations.AddField(
            model_name='order',
            name='products',
            field=models.ManyToManyField(through='ofd_app.OrderProduct', to='ofd_app.Product', verbose_name='Продукты заказанные пользователем'),
        ),
        migrations.AddField(
            model_name='order',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Номер заказа'),
        ),
        migrations.AddField(
            model_name='user',
            name='products',
            field=models.ManyToManyField(through='ofd_app.ProductUserRel', to='ofd_app.Product', verbose_name='Продукты доступные пользователю'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='productuserrel',
            unique_together={('user', 'product')},
        ),
        migrations.RunPython(create_order_statuses),
        migrations.RunPython(create_groups)
    ]
